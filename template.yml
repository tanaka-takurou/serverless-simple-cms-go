AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Serverless CMS

Parameters:
  ApplicationName:
    Type: String
    Default: 'ServerlessCMS'
  ManagementPageApiStageName:
    Type: String
    Default: 'ProdStage'

Metadata:
  AWS::ServerlessRepo::Application:
    Name: Serverless-Application-Simple-CMS
    Description: 'Serverless Application Simple Content Management System'
    Author: tanaka-takurou
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels: ['ServerlessRepo']
    HomePageUrl: https://github.com/tanaka-takurou/serverless-simple-cms-go/
    SemanticVersion: 0.1.0
    SourceCodeUrl: https://github.com/tanaka-takurou/serverless-simple-cms-go/

Resources:
  FrontPageApi:
    Type: AWS::Serverless::HttpApi
  ImgBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders: ['*']
          AllowedMethods: [GET]
          AllowedOrigins: ['*']
          Id: CORSRuleId
          MaxAge: '3600'
  ItemTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "item_type"
        AttributeType: "N"
      - AttributeName: "id"
        AttributeType: "N"
      KeySchema:
      - AttributeName: "item_type"
        KeyType: "HASH"
      - AttributeName: "id"
        KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 3
        WriteCapacityUnits: 3
      SSESpecification:
        SSEEnabled: False
  FrontPageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
      - arm64
      CodeUri: bin/
      Handler: bootstrap
      MemorySize: 256
      Runtime: provided.al2
      Description: 'CMS Front Function'
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref 'ItemTable'
      - S3CrudPolicy:
          BucketName: !Ref 'ImgBucket'
      Environment:
        Variables:
          TABLE_NAME: !Ref 'ItemTable'
          BUCKET_NAME: !Ref 'ImgBucket'
          REGION: !Ref 'AWS::Region'
      Events:
        FrontPageApi:
          Type: HttpApi
          Properties:
            Path: '/'
            Method: get
            ApiId: !Ref FrontPageApi
        FrontProxyApi:
          Type: HttpApi
          Properties:
            Path: '/{proxy+}'
            Method: get
            ApiId: !Ref FrontPageApi
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        UnusedAccountValidityDays: 7
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: 'OFF'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
  UserPoolAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: mobile_app
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH
      GenerateSecret: false
      UserPoolId: !Ref UserPool
  ManagementPageApi:
    Type: AWS::Serverless::Api
    Properties:
      EndpointConfiguration: REGIONAL
      StageName: !Ref ManagementPageApiStageName
  ManagementPageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
      - arm64
      CodeUri: management/bin/
      Handler: bootstrap
      MemorySize: 256
      Runtime: provided.al2
      Description: 'CMS Management Front Function'
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref 'ItemTable'
      Environment:
        Variables:
          ITEM_TABLE_NAME: !Ref 'ItemTable'
          BUCKET_NAME: !Ref 'ImgBucket'
          REGION: !Ref 'AWS::Region'
          API_PATH: !Join [ '', [ '/', !Ref ManagementPageApiStageName, '/api'] ]
          FRONT_URL: !Join [ '', [ 'https://', !Ref FrontPageApi, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/'] ]
      Events:
        FrontPageApi:
          Type: Api
          Properties:
            Path: '/'
            Method: get
            RestApiId: !Ref ManagementPageApi
        FrontProxyApi:
          Type: Api
          Properties:
            Path: '/{proxy+}'
            Method: get
            RestApiId: !Ref ManagementPageApi
  ManagementMainFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
      - arm64
      CodeUri: management/api/bin/
      Handler: bootstrap
      MemorySize: 256
      Runtime: provided.al2
      Description: 'CMS Management API Function'
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref 'ItemTable'
      - S3CrudPolicy:
          BucketName: !Ref 'ImgBucket'
      - Statement:
        - Sid: UserPoolControlPolicy
          Effect: Allow
          Action:
          - cognito-idp:InitiateAuth
          - cognito-idp:GetUser
          - cognito-idp:ChangePassword
          - cognito-idp:GlobalSignOut
          - cognito-idp:SignUp
          - cognito-idp:ConfirmSignUp
          Resource: !Sub
          - 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}'
          - { UserPoolId: !Ref UserPool}
      Environment:
        Variables:
          ITEM_TABLE_NAME: !Ref 'ItemTable'
          BUCKET_NAME: !Ref 'ImgBucket'
          REGION: !Ref 'AWS::Region'
          CLIENT_ID: !Ref UserPoolAppClient
          FRONT_FUNCTION: !Ref 'FrontPageFunction'
          SIGNUP_FLAG: '0'
      Events:
        FrontPageApi:
          Type: Api
          Properties:
            Path: '/api'
            Method: post
            RestApiId: !Ref ManagementPageApi

Outputs:
  FrontURI:
    Description: "Front Page URI"
    Value: !Join [ '', [ 'https://', !Ref FrontPageApi, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/'] ]
    Export:
      Name: !Sub "${AWS::StackName}-Front"
  ManagementURI:
    Description: "Management Page URI"
    Value: !Join [ '', [ 'https://', !Ref ManagementPageApi, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/', !Ref ManagementPageApiStageName, '/'] ]
    Export:
      Name: !Sub "${AWS::StackName}-Management"
  BucketName:
    Description: "Image Bucket Name"
    Value: !Ref 'ImgBucket'
    Export:
      Name: !Sub "${AWS::StackName}-Bucket"
  TableName:
    Description: "Item Table Name"
    Value: !Ref 'ItemTable'
    Export:
      Name: !Sub "${AWS::StackName}-Table"
